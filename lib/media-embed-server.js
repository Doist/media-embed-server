// Generated by CoffeeScript 1.7.1
(function() {
  var app, async, express, media_parser, partial, program, usage;

  express = require('express');

  async = require('async');

  program = require('commander');

  partial = require('partial');

  media_parser = require('media-parser');

  app = express();

  app.get('/parse', function(req, res) {
    var callback, cb, cb_functions, e, min_tn_size, timeout, urls, _i, _len, _url;
    timeout = parseInt(req.query.timeout || 5) * 1000;
    urls = req.query.urls || "[]";
    min_tn_size = parseInt(req.query.min_tn_size || 100);
    callback = req.query.callback || null;
    try {
      urls = JSON.parse(urls);
    } catch (_error) {
      e = _error;
      return res.send(500, 'Invalid JSON encoding of urls');
    }
    cb_functions = [];
    for (_i = 0, _len = urls.length; _i < _len; _i++) {
      _url = urls[_i];
      cb = function(url, async_cb) {
        return media_parser.parse(url, function(obj) {
          var result, thumb_info;
          if (obj) {
            if (obj.get_thumbnail_url) {
              thumb_info = obj.get_thumbnail_url(min_tn_size);
              delete obj.get_thumbnail_url;
              if (thumb_info) {
                obj.thumbnail_url = thumb_info[0];
                obj.thumbnail_width = thumb_info[1];
                obj.thumbnail_height = thumb_info[2];
              }
            }
            result = obj;
          } else {
            result = {
              'error': 'Could not resolve resource'
            };
          }
          return async_cb(null, [url, result]);
        }, timeout);
      };
      cb_functions.push(partial(cb, _url));
    }
    return async.parallel(cb_functions, function(err, cb_results) {
      var json, results, rpair, _j, _len1;
      results = {};
      for (_j = 0, _len1 = cb_results.length; _j < _len1; _j++) {
        rpair = cb_results[_j];
        results[rpair[0]] = rpair[1];
      }
      json = JSON.stringify(results);
      if (callback) {
        res.set({
          'Content-Type': 'text/javascript'
        });
        return res.send(callback + "(" + json + ")");
      } else {
        res.set({
          'Content-Type': 'application/json'
        });
        return res.send(json);
      }
    });
  });

  usage = "A specialized API for handling oemebed requests";

  program.version('0.0.1').usage(usage).option('-p, --port <port>').parse(process.argv);

  program.port = parseInt(program.port || '8080');

  media_parser.MediaParser.init(media_parser.NodeHttpService);

  app.listen(program.port);

  console.log('Started Media Server on ' + program.port);

}).call(this);
